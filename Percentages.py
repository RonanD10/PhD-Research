from _Functions import *
import matplotlib.pyplot as plt
import networkx as nx
import numpy as np 


# Plan of action

# 1) Construct table of chromatic percentages and rigid percentages for 10 vertices, 15, vertices, 20 vertices. 
#    Consider exhausting 10-vertex cases
#    Pandas dataframes? 
#    Latex table
#    Need non-isomorphic cases. Use degree sequence to speed up computation
#    Save all non-rigid cases
#    Search over k-thousand cases -- the more the better
#    Record rigid examples as much as possible 


# 2) For any columns with only rigid graphs, look for 'special' properties
#    See list of degree sequences
#    Look for complete subgraphs
#    Look for triangles


# 3) Read for a few hours Flexible Circuits
#    Read Oxley elementary theory
#    Consider coding Oxley examples 


# 4) Start formal summary on Overleaf
#    Explain code: maybe flow chart -- maybe algorithm pseudocode


# 5) Find percentage of non-rigids that have degree-3 vertices
#    Remove degree-3 vertices and compute degrees of freedom: 3n - 6 - rank R(g, p)
#    Find dimension of 'circuit space': dim coker R(G, p)
#    ASK [something about span of vectors in coker space and w_ij coefficients, looking for all non-zero] 


# 6) Fix is_circuit function ('circuit_checker')
#    Write circuit_finder with coker theory involved


K4 = [[0, 1], [0, 2], [0, 3], [1, 2], [1, 3], [2, 3]]


def deg_seq(E):
    """
    returns sorted degree sequence of a graph
    """
    G = nx.Graph()
    G.add_edges_from(E)
    deg = [d for d in G.degree()]
    return sorted([d[1] for d in deg])


def isnot_isomorphic(E, E_class):
    """
    Takes in an edge list E and checks if this is isomorphic to edge lists in E_class 
    """
    to_check = []
    ds1 = deg_seq(E)
    for F in E_class:  # check only matching degree sequence graphs
        if ds1 == deg_seq(F):
            to_check.append(F) 
    if len(to_check) > 0:
        G1 = nx.Graph()
        G1.add_edges_from(E)
        for F in to_check:
            G2 = nx.Graph()
            G2.add_edges_from(F)
            if nx.is_isomorphic(G1, G2) == True: 
                return False
    return True


E_class = [[[0, 3], [0, 4], [0, 5], [0, 6], [0, 7], [0, 8], [0, 9], [1, 2], [1, 3], [1, 6], [1, 8], [1, 9], [2, 5], [2, 7], [3, 4], [3, 6], [4, 9], [5, 6], [5, 8], [5, 9], [6, 8], [6, 9], [7, 8], [7, 9]],
[[0, 3], [0, 4], [0, 5], [0, 6], [0, 7], [1, 2], [1, 3], [1, 4], [1, 8], [1, 9], [2, 5], [2, 8], [3, 5], [3, 6], [4, 6], [4, 7], [4, 9], [5, 6], [5, 7], [5, 9], [6, 7], [6, 8], [6, 9], [7, 8]],
[[0, 1], [0, 6], [0, 7], [1, 2], [1, 5], [1, 6], [1, 7], [1, 8], [2, 4], [2, 6], [2, 9], [3, 6], [3, 8], [3, 9], [4, 5], [4, 6], [4, 7], [4, 8], [4, 9], [5, 7], [5, 8], [6, 8], [6, 9], [8, 9]],
[[0, 1], [0, 3], [0, 5], [0, 6], [0, 9], [1, 2], [1, 3], [1, 6], [2, 3], [2, 4], [2, 5], [2, 6], [2, 7], [2, 8], [3, 4], [3, 5], [4, 6], [4, 8], [5, 7], [6, 7], [6, 8], [6, 9], [7, 8], [8, 9]],
[[0, 1], [0, 2], [0, 4], [0, 5], [0, 7], [0, 9], [1, 3], [1, 5], [2, 3], [2, 4], [2, 5], [2, 8], [3, 4], [3, 6], [3, 8], [3, 9], [4, 5], [4, 6], [4, 7], [5, 7], [5, 8], [5, 9], [6, 7], [8, 9]],
[[0, 1], [0, 4], [0, 5], [0, 9], [1, 6], [1, 8], [2, 4], [2, 5], [2, 7], [2, 9], [3, 4], [3, 5], [3, 9], [4, 6], [4, 7], [4, 9], [5, 7], [5, 8], [5, 9], [6, 8], [6, 9], [7, 8], [7, 9], [8, 9]],
[[0, 1], [0, 2], [0, 3], [0, 4], [0, 5], [0, 8], [0, 9], [1, 4], [1, 5], [1, 9], [2, 4], [2, 5], [2, 6], [2, 7], [3, 5], [3, 8], [3, 9], [4, 5], [4, 7], [4, 9], [5, 7], [6, 7], [6, 9], [7, 8]],
[[0, 3], [0, 4], [0, 7], [0, 8], [1, 3], [1, 4], [1, 5], [1, 7], [1, 8], [1, 9], [2, 3], [2, 5], [2, 7], [2, 8], [2, 9], [3, 4], [3, 6], [4, 6], [5, 6], [5, 7], [5, 8], [6, 9], [7, 9], [8, 9]],
[[0, 1], [0, 2], [0, 3], [0, 4], [0, 6], [0, 8], [0, 9], [1, 7], [1, 9], [2, 4], [2, 5], [2, 7], [2, 8], [3, 4], [3, 5], [3, 7], [3, 8], [3, 9], [4, 6], [4, 7], [4, 8], [5, 9], [6, 9], [7, 9]],
[[0, 3], [0, 4], [0, 7], [0, 8], [1, 3], [1, 4], [1, 6], [1, 8], [2, 3], [2, 7], [2, 8], [3, 4], [3, 5], [4, 5], [4, 6], [4, 7], [4, 9], [5, 6], [5, 7], [5, 8], [6, 7], [6, 8], [6, 9], [7, 9]],
[[0, 2], [0, 3], [0, 6], [0, 9], [1, 3], [1, 4], [1, 5], [1, 6], [1, 9], [2, 4], [2, 5], [2, 6], [2, 8], [3, 4], [3, 7], [3, 8], [4, 6], [4, 9], [5, 6], [6, 8], [6, 9], [7, 8], [7, 9], [8, 9]],
[[0, 1], [0, 2], [0, 6], [0, 7], [0, 8], [0, 9], [1, 2], [1, 3], [1, 4], [1, 5], [1, 7], [1, 9], [2, 4], [2, 9], [3, 4], [3, 5], [3, 7], [4, 6], [5, 6], [5, 7], [5, 9], [6, 7], [7, 8], [8, 9]],
[[0, 5], [0, 6], [0, 7], [0, 8], [0, 9], [1, 2], [1, 3], [1, 4], [1, 5], [1, 7], [1, 9], [2, 3], [2, 4], [2, 8], [3, 4], [3, 6], [3, 8], [4, 5], [4, 6], [4, 8], [4, 9], [5, 6], [6, 7], [6, 9]],
[[0, 3], [0, 5], [0, 6], [0, 8], [0, 9], [1, 2], [1, 7], [1, 8], [2, 6], [2, 8], [2, 9], [3, 4], [3, 6], [3, 7], [3, 8], [3, 9], [4, 8], [4, 9], [5, 8], [5, 9], [6, 7], [7, 8], [7, 9], [8, 9]],
[[0, 2], [0, 3], [0, 5], [0, 7], [0, 8], [0, 9], [1, 3], [1, 6], [1, 7], [1, 9], [2, 4], [2, 5], [2, 6], [2, 7], [3, 7], [3, 8], [3, 9], [4, 7], [4, 9], [5, 9], [6, 7], [6, 8], [7, 8], [7, 9]],
[[0, 1], [0, 4], [0, 6], [0, 7], [0, 8], [1, 2], [1, 3], [1, 5], [1, 6], [2, 3], [2, 4], [2, 5], [2, 6], [2, 7], [3, 7], [3, 8], [3, 9], [4, 5], [4, 7], [4, 8], [5, 7], [5, 8], [5, 9], [6, 9]],
[[0, 1], [0, 3], [0, 6], [0, 9], [1, 7], [1, 9], [2, 3], [2, 5], [2, 6], [2, 7], [3, 4], [3, 5], [3, 6], [3, 7], [3, 9], [4, 6], [4, 7], [4, 8], [5, 6], [5, 7], [6, 8], [6, 9], [7, 9], [8, 9]],
[[0, 2], [0, 6], [0, 7], [1, 3], [1, 5], [1, 7], [1, 8], [2, 4], [2, 5], [2, 7], [2, 9], [3, 4], [3, 5], [3, 6], [3, 7], [3, 8], [3, 9], [4, 9], [5, 7], [5, 8], [5, 9], [6, 7], [6, 8], [8, 9]],
[[0, 3], [0, 6], [0, 7], [0, 8], [1, 2], [1, 5], [1, 6], [1, 7], [2, 3], [2, 4], [2, 7], [3, 4], [3, 5], [3, 6], [3, 7], [3, 8], [3, 9], [4, 5], [4, 7], [4, 8], [5, 7], [5, 9], [7, 9], [8, 9]],
[[0, 1], [0, 2], [0, 3], [0, 4], [0, 5], [0, 6], [0, 9], [1, 2], [1, 3], [1, 7], [1, 8], [1, 9], [2, 6], [2, 7], [3, 4], [3, 6], [3, 9], [4, 5], [4, 9], [5, 7], [5, 8], [5, 9], [6, 7], [8, 9]],
[[0, 2], [0, 7], [0, 8], [0, 9], [1, 3], [1, 4], [1, 5], [2, 3], [2, 4], [2, 5], [2, 6], [2, 7], [3, 5], [3, 7], [3, 8], [3, 9], [4, 5], [4, 6], [4, 7], [4, 9], [5, 6], [5, 8], [5, 9], [7, 8]],
[[0, 1], [0, 4], [0, 5], [0, 8], [0, 9], [1, 2], [1, 3], [1, 5], [1, 7], [1, 9], [2, 7], [2, 8], [2, 9], [3, 4], [3, 8], [3, 9], [4, 6], [4, 7], [5, 6], [5, 7], [5, 8], [5, 9], [6, 9], [7, 8]],
[[0, 2], [0, 3], [0, 4], [0, 5], [0, 7], [0, 9], [1, 4], [1, 6], [1, 8], [1, 9], [2, 3], [2, 4], [2, 5], [2, 6], [2, 7], [2, 8], [3, 5], [3, 6], [4, 5], [4, 9], [5, 7], [6, 7], [6, 9], [8, 9]],
[[0, 1], [0, 2], [0, 4], [0, 6], [0, 8], [1, 2], [1, 3], [1, 4], [1, 5], [1, 8], [2, 3], [2, 4], [2, 6], [3, 7], [3, 9], [4, 5], [4, 6], [4, 7], [4, 9], [5, 9], [6, 7], [6, 8], [7, 8], [8, 9]],
[[0, 1], [0, 3], [0, 4], [0, 5], [0, 9], [1, 4], [1, 5], [1, 8], [2, 3], [2, 4], [2, 7], [3, 5], [3, 6], [3, 9], [4, 6], [4, 7], [4, 8], [5, 6], [5, 8], [5, 9], [6, 7], [6, 8], [6, 9], [7, 9]],
[[0, 3], [0, 5], [0, 6], [0, 7], [0, 9], [1, 3], [1, 4], [1, 5], [1, 8], [2, 6], [2, 8], [2, 9], [3, 5], [3, 6], [4, 5], [4, 6], [4, 7], [4, 9], [5, 6], [5, 9], [6, 7], [7, 8], [7, 9], [8, 9]],
[[0, 1], [0, 3], [0, 4], [0, 7], [0, 8], [0, 9], [1, 2], [1, 4], [1, 7], [2, 3], [2, 4], [2, 5], [2, 6], [2, 7], [2, 8], [3, 4], [3, 6], [3, 9], [4, 5], [4, 8], [4, 9], [5, 8], [6, 7], [7, 9]],
[[0, 2], [0, 4], [0, 5], [0, 8], [1, 2], [1, 3], [1, 4], [1, 7], [1, 8], [2, 4], [2, 5], [2, 6], [2, 7], [3, 5], [3, 8], [3, 9], [4, 5], [4, 7], [5, 8], [5, 9], [6, 8], [6, 9], [7, 8], [8, 9]],
[[0, 3], [0, 6], [0, 7], [0, 8], [0, 9], [1, 2], [1, 3], [1, 4], [1, 7], [2, 4], [2, 5], [2, 6], [3, 4], [3, 7], [3, 9], [4, 5], [4, 7], [4, 8], [4, 9], [5, 6], [5, 7], [6, 8], [7, 8], [7, 9]],
[[0, 1], [0, 4], [0, 6], [1, 2], [1, 5], [1, 8], [2, 5], [2, 6], [2, 7], [3, 5], [3, 7], [3, 8], [3, 9], [4, 6], [4, 7], [4, 8], [4, 9], [5, 7], [5, 8], [5, 9], [6, 8], [6, 9], [7, 8], [8, 9]],
[[0, 1], [0, 2], [0, 5], [0, 6], [0, 7], [0, 8], [1, 2], [1, 4], [1, 5], [1, 6], [1, 9], [2, 3], [2, 6], [2, 9], [3, 7], [3, 9], [4, 5], [4, 7], [4, 8], [5, 9], [6, 7], [6, 8], [7, 8], [8, 9]],
[[0, 1], [0, 2], [0, 3], [0, 4], [0, 5], [0, 7], [0, 8], [0, 9], [1, 4], [1, 5], [1, 6], [1, 7], [1, 9], [2, 5], [2, 7], [3, 4], [3, 7], [3, 8], [3, 9], [4, 5], [4, 7], [4, 8], [5, 6], [6, 8]],
[[0, 1], [0, 2], [0, 5], [0, 7], [0, 9], [1, 2], [1, 3], [1, 6], [1, 9], [2, 4], [2, 6], [2, 7], [2, 8], [3, 4], [3, 8], [4, 5], [4, 7], [4, 9], [5, 6], [5, 8], [6, 7], [6, 8], [6, 9], [7, 8]],
[[0, 1], [0, 2], [0, 3], [0, 5], [0, 6], [0, 7], [1, 3], [1, 9], [2, 3], [2, 5], [2, 6], [3, 4], [3, 5], [3, 6], [3, 8], [3, 9], [4, 5], [4, 6], [4, 9], [5, 7], [5, 8], [6, 7], [6, 8], [6, 9]],
[[0, 3], [0, 4], [0, 8], [0, 9], [1, 2], [1, 3], [1, 4], [1, 7], [1, 9], [2, 6], [2, 8], [2, 9], [3, 5], [3, 6], [4, 5], [4, 7], [4, 8], [4, 9], [5, 6], [5, 8], [5, 9], [6, 8], [7, 8], [7, 9]],
[[0, 1], [0, 7], [0, 8], [0, 9], [1, 2], [1, 3], [1, 6], [1, 8], [1, 9], [2, 3], [2, 5], [2, 7], [2, 8], [3, 8], [3, 9], [4, 5], [4, 6], [4, 7], [4, 9], [5, 6], [5, 8], [5, 9], [6, 8], [7, 8]],
[[0, 1], [0, 3], [0, 8], [0, 9], [1, 2], [1, 4], [1, 5], [1, 7], [1, 9], [2, 3], [2, 4], [2, 5], [2, 6], [2, 8], [3, 4], [3, 7], [3, 9], [4, 5], [5, 7], [6, 8], [6, 9], [7, 8], [7, 9], [8, 9]],
[[0, 4], [0, 5], [0, 8], [1, 4], [1, 6], [1, 7], [1, 8], [1, 9], [2, 3], [2, 4], [2, 5], [2, 6], [2, 7], [2, 8], [3, 4], [3, 9], [4, 5], [4, 9], [5, 6], [5, 9], [6, 8], [6, 9], [7, 9], [8, 9]],
[[0, 1], [0, 3], [0, 4], [0, 6], [1, 4], [1, 5], [1, 7], [1, 8], [1, 9], [2, 4], [2, 5], [2, 7], [2, 9], [3, 4], [3, 5], [3, 6], [3, 7], [3, 8], [3, 9], [4, 5], [4, 7], [6, 8], [7, 8], [8, 9]],
[[0, 1], [0, 2], [0, 3], [0, 7], [0, 8], [0, 9], [1, 2], [1, 3], [1, 4], [1, 5], [1, 6], [1, 7], [2, 4], [2, 6], [3, 4], [3, 5], [3, 9], [4, 6], [4, 7], [5, 8], [5, 9], [6, 8], [7, 9], [8, 9]],
[[0, 2], [0, 4], [0, 5], [0, 6], [0, 7], [1, 3], [1, 6], [1, 7], [1, 9], [2, 3], [2, 8], [2, 9], [3, 5], [3, 8], [4, 5], [4, 6], [4, 8], [4, 9], [5, 7], [5, 8], [6, 7], [6, 8], [6, 9], [8, 9]],
[[0, 4], [0, 5], [0, 6], [0, 8], [1, 2], [1, 3], [1, 4], [1, 6], [1, 8], [2, 3], [2, 6], [3, 4], [3, 6], [3, 7], [3, 8], [3, 9], [4, 6], [4, 7], [5, 6], [5, 7], [5, 9], [6, 7], [6, 9], [7, 9]],
[[0, 3], [0, 4], [0, 5], [0, 7], [0, 8], [0, 9], [1, 2], [1, 3], [1, 7], [1, 8], [1, 9], [2, 3], [2, 8], [3, 4], [3, 6], [3, 7], [3, 8], [3, 9], [4, 5], [4, 6], [4, 8], [5, 7], [6, 7], [7, 8]],
[[0, 1], [0, 5], [0, 6], [0, 7], [0, 9], [1, 2], [1, 4], [1, 5], [1, 6], [1, 7], [1, 8], [2, 4], [2, 6], [2, 8], [2, 9], [3, 4], [3, 7], [3, 8], [4, 5], [4, 8], [5, 6], [6, 7], [6, 9], [7, 8]],
[[0, 3], [0, 4], [0, 5], [0, 7], [0, 8], [0, 9], [1, 2], [1, 5], [1, 7], [2, 4], [2, 5], [2, 6], [3, 4], [3, 7], [3, 8], [4, 7], [4, 8], [5, 6], [5, 7], [5, 9], [6, 7], [6, 8], [6, 9], [8, 9]],
[[0, 2], [0, 3], [0, 4], [0, 5], [0, 6], [0, 7], [0, 9], [1, 2], [1, 5], [1, 6], [1, 8], [2, 3], [2, 4], [2, 6], [3, 4], [3, 5], [3, 7], [3, 8], [4, 5], [4, 8], [5, 7], [5, 9], [7, 9], [8, 9]],
[[0, 2], [0, 4], [0, 7], [1, 2], [1, 4], [1, 5], [1, 6], [1, 9], [2, 4], [2, 5], [2, 6], [2, 7], [3, 5], [3, 7], [3, 9], [4, 5], [4, 7], [5, 6], [5, 8], [6, 8], [6, 9], [7, 8], [7, 9], [8, 9]],
[[0, 1], [0, 2], [0, 6], [0, 7], [0, 9], [1, 2], [1, 5], [1, 9], [2, 3], [2, 4], [2, 7], [2, 8], [2, 9], [3, 5], [3, 6], [4, 6], [4, 7], [4, 8], [5, 6], [5, 7], [5, 8], [6, 7], [6, 8], [7, 8]],
[[0, 1], [0, 2], [0, 3], [0, 4], [0, 7], [0, 8], [1, 4], [1, 5], [1, 7], [2, 6], [2, 7], [2, 8], [3, 4], [3, 6], [4, 6], [4, 8], [5, 7], [5, 8], [5, 9], [6, 8], [6, 9], [7, 8], [7, 9], [8, 9]],
[[0, 2], [0, 3], [0, 4], [0, 7], [0, 8], [0, 9], [1, 2], [1, 3], [1, 4], [1, 5], [1, 6], [1, 8], [1, 9], [2, 5], [2, 6], [3, 7], [4, 5], [4, 8], [4, 9], [5, 7], [5, 8], [6, 8], [6, 9], [7, 9]]]

search = example_search(20, 1000)
E_class = search[0]
E_nrigid = search[1]
print("All examples: ", len(E_class))
# E_keep = []
# E_keep.append(E_class[0])
X2 = []
X3 = []
X4 = []
X5 = []
X6 = []
# for F in E_class:
#     if isnot_isomorphic(F, E_keep) == True:
#         E_keep.append(F)
print("Distinct examples: ", len(E_class))
for E in E_class:
    if colour(E) == 2:
        X2.append(E)
    if colour(E) == 3:
        X3.append(E)
    if colour(E) == 4:
        X4.append(E)
    if colour(E) == 5:
        X5.append(E)
    if colour(E) == 6:
        X6.append(E)

print("X = 2: ", len(X2), "X = 3: ", len(X3), "X = 4: ", len(X4), "X = 5: ", len(X5), "X = 6: ", len(X6))
print("X6: ", X6)
print("X3: ", X3)
print(E_nrigid)

E1 = [[0, 1], [0, 2], [0, 4], [0, 6], [0, 7], [0, 8], [1, 2], [1, 3], [1, 4], [1, 5], [2, 3], [2, 4], [2, 5], [3, 4], [3, 6], [3, 7], [3, 8], [3, 9], [4, 9], [5, 9], [6, 7], [6, 8], [7, 8], [7, 9]]
E2 = [[[0, 1], [0, 2], [0, 7], [0, 9], [1, 3], [1, 4], [1, 6], [1, 7], [1, 8], [1, 9], [2, 3], [2, 4], [2, 5], [2, 6], [2, 7], [2, 9], [3, 5], [3, 6], [3, 8], [4, 5], [4, 6], [5, 6], [7, 9], [8, 9]]]

# print(isnot_isomorphic(E1, E2))

# G = nx.Graph()
# G.add_edges_from(E1)
# nx.draw_circular(G)
# plt.show()

# H = nx.Graph()
# H.add_edges_from(E2[0])
# nx.draw_circular(H)
# plt.show()
